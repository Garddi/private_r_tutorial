install.package("tidyverse")
install.packages("tidyverse")
library(tidyverse)
install.packages("revealjs")
Sys.time()
format(Sys.time(), "%d-%m-%Y")
runif(1, min=0, max = 1)
runif(1, min=0, max = 1)
make_coords <- function(draws){
x <- runif(draws, min = 0, max = 1)
y <- runif(draws, min = 0, max = 1)
df <- cbind(x,y)
df$dist <- sqrt(x^2 + y^2)
ratio <- sum(df$dist =< 1)/nrow(df)
make_coords <- function(draws){
x <- runif(draws, min = 0, max = 1)
y <- runif(draws, min = 0, max = 1)
df <- cbind(x,y)
df$dist <- sqrt(x^2 + y^2)
ratio <- sum(df$dist =< 1)/nrow(df)
make_coords <- function(draws){
x <- runif(draws, min = 0, max = 1)
y <- runif(draws, min = 0, max = 1)
df <- cbind(x,y)
df$dist <- sqrt(x^2 + y^2)
ratio <- sum(df$dist <= 1)/nrow(df)
return_statement <- paste0("Pi is approximately ", ratio*4, "!")
}
make_coords(draws=1000)
draws=1000
x <- runif(draws, min = 0, max = 1)
y <- runif(draws, min = 0, max = 1)
df <- cbind(x,y)
df$dist <- sqrt(x^2 + y^2)
View(df)
sqrt(x^2 + y^2)
dist <- sqrt(x^2 + y^2)
ratio <- sum(dist <= 1)/nrow(df)
nrow(df)
df <- cbind(x,y)
View(df)
nrow(df)
ratio <- sum(dist <= 1)/nrow(df)
ratio*4
make_coords <- function(draws){
x <- runif(draws, min = 0, max = 1)
y <- runif(draws, min = 0, max = 1)
df <- cbind(x,y)
dist <- sqrt(x^2 + y^2)
ratio <- sum(dist <= 1)/nrow(df)
return_statement <- paste0("Pi is approximately ", ratio*4, "!")
}
make_coords(draws=1000)
make_coords <- function(draws){
x <- runif(draws, min = 0, max = 1)
y <- runif(draws, min = 0, max = 1)
df <- cbind(x,y)
dist <- sqrt(x^2 + y^2)
ratio <- sum(dist <= 1)/nrow(df)
return_statement <- paste0("Pi is approximately ", ratio*4, "!")
return(return_statement)
}
make_coords(draws=1000)
make_coords(draws=5000)
make_coords(draws=10000)
make_coords(draws=100000)
make_coords(draws=1000000)
make_coords(draws=10000000)
library(googledrive)
drive_ls(path = "https://drive.google.com/drive/u/1/folders/1CvYh6ZDVfnyGLPFqPAr8gVNoLE_7BsKS")
drive_ls(path = "https://drive.google.com/drive/u/1/folders/1Cvo7idJlrujxCSy6nC6TNs7BV9OwmiUR")
test <- drive_ls(path = "https://drive.google.com/drive/u/1/folders/1Cvo7idJlrujxCSy6nC6TNs7BV9OwmiUR")
library(tidyverse)
find_pi <- function(draws){
x_coords <- runif(draws, min = 0, max = 1)
y_coords <- runif(draws, min = 0, max = 1)
df <- data.frame(x_coords, y_coords)
df$dist <- sqrt(df$x_coords^2 + df$y_coords^2)
df$withins <- ifelse(df$dist =< 1, 1, 0)
find_pi <- function(draws){
x_coords <- runif(draws, min = 0, max = 1)
y_coords <- runif(draws, min = 0, max = 1)
df <- data.frame(x_coords, y_coords)
df$dist <- sqrt(df$x_coords^2 + df$y_coords^2)
df$withins <- ifelse(df$dist <= 1, 1, 0)
diagnostic <- paste0("pi is approximately ", (sum(df$withins == 1)/nrow(df))*4, "!")
df %>%
ggplot(aes(x=x_coords, y = y_coords, color = withins)) +
geom_point()
print(diagnostic)
}
find_pi(1000)
draws=1000
x_coords <- runif(draws, min = 0, max = 1)
y_coords <- runif(draws, min = 0, max = 1)
df <- data.frame(x_coords, y_coords)
df$dist <- sqrt(df$x_coords^2 + df$y_coords^2)
df$withins <- ifelse(df$dist <= 1, 1, 0)
diagnostic <- paste0("pi is approximately ", (sum(df$withins == 1)/nrow(df))*4, "!")
df %>%
ggplot(aes(x=x_coords, y = y_coords, color = withins)) +
geom_point()
find_pi <- function(draws){
x_coords <- runif(draws, min = 0, max = 1)
y_coords <- runif(draws, min = 0, max = 1)
df <- data.frame(x_coords, y_coords)
df$dist <- sqrt(df$x_coords^2 + df$y_coords^2)
df$withins <- ifelse(df$dist <= 1, "Yes", "No")
diagnostic <- paste0("pi is approximately ", (sum(df$withins == "Yes")/nrow(df))*4, "!")
print(diagnostic)
return(df)
}
find_pi(1000)
test <- find_pi(1000)
test %>%
ggplot(aes(x=x_coords,y=y_coords, color = withins)) +
geom_point() +
theme_bw()
test <- find_pi(100000)
test %>%
ggplot(aes(x=x_coords,y=y_coords, color = withins)) +
geom_point() +
theme_bw()
?seq_along
runif(1, min = 1, max = 7)
setwd("C:/Users/xdiega/OneDrive/Documents/advanced_statistics_phd/private_r_tutorial")
![yaml](./images/yaml_header.png)
1 + 1 ### Comments are in hashtags
"hello" ## Strings or characters
NA
## NA can also have type specific values, but these are *never* used
NA_character_
NA_complex_ ## All yield same output
## Boolean datas
TRUE
FALSE
hello <- 23
hello ## Calling the object prints the content by default
"Yes" == "Yes"
"Yes" == "No"
"Yes" != "Yes"
"Yes" != "No"
"Yes" %in% c("No", "no", "Maybe", "Yes")
### R is also what is called "loosely" typed, so this works
3 == "3" ## Equal even tho they are different types of data
# Vector
a_vector <- c(1, 3, 5, 6, 7,1)
a_vector[4] ## Fourth number of the vector above
df_example <- data.frame(names = c("Gard", "Grad", "Gard Olav", "the Notorious G.A.R.D."),
age = c(27, 23, 21, 19),
fav_movie = c("The Adolescence of Utena", "12 Angry Men", "Inception", "Straight outta Compton"),
happy = c(FALSE, TRUE, FALSE, TRUE))
df_example[1,]
df_example[c(1,2),]
df_example[,1]
df_example[,1:2]
df_example[3,2]
## Selecting on names
df_example[,c("fav_movie")]
## Index tool
df_example$age
df_example$happy
ex_list <- list(df_example, a_vector)
ex_list[[2]]
mean(a_vector)
mean(a_vector, trim = .2)
new_vector <- c(1,3,5,6,7,3,NA)
mean(new_vector)
mean(new_vector, na.rm = TRUE)
getwd()
list.files("./images/") ## ./ means the current working directory
list.files("../.")
list.files("../../advent_of_Code2022/scripts/")
df_example$names
df_example$names[3]
df_example$fav_movie
df_example$fav_movie[1]
idx <- 3 # idx for indexer
df_example$names[idx]
df_example$happy[idx]
## For several numbers, still works fine
idx <- c(1,3)
df_example$names[idx]
df_example$fav_movie[idx]
## Note the file path specification is also very specific. Two dots signal
## a directory above your current. So this data is found in
## the parallell folder MA thesis, which is parallell to the folder two layers
## above the current directory, then with a specified path to find it.
library(haven)
load("../../MA thesis/Data and R scripts/Survey Data/SurvData.Rdata")
head(SurvData)
names(SurvData)
summary(SurvData$gender)
table(SurvData$gender)
table(SurvData$gender, SurvData$whostility)
class(SurvData$gender)
class(SurvData$country)
class(df_example$happy)
class(SurvData)
plot(density(SurvData$whostility))
hist(SurvData$whostility)
load("../../advanced_statistics_phd/my_data/simple_set.rda")
attributes(joined_sets2$straff)
library(tidyverse)
## A simple pipe explanation
SurvData %>%
pull(whostility) %>%
mean(na.rm = TRUE)
# Is the same as
mean(pull(SurvData, whostility), na.rm = TRUE)
library(janitor)
df_example$`This Name is REALLY bad 120` <- "BAD"
names(df_example)
df_example <- clean_names(df_example)
names(df_example)
SurvData <- SurvData %>%
mutate(gender_subtracted = gender - 1)
## Lets compare the outputs to ensure successful transformation
table(SurvData$gender, SurvData$gender_subtracted)
table(SurvData$country)
SurvData <- SurvData %>%
mutate(gender_text = as.character(gender))
class(SurvData$gender_text)
head(SurvData$gender_text)
SurvData <- SurvData %>%
mutate(gender_ifelsed = ifelse(gender == 2, "Woman", "Man"))
table(SurvData$gender, SurvData$gender_ifelsed)
SurvData <- SurvData %>%
mutate(gender_cased = case_when(  ## Style guide recomends this style
gender == 2 ~ "Woman",
gender == 1 ~ "Man",
gender == 3 ~ "Non-Binary"
))
table(SurvData$gender, SurvData$gender_cased)
vars_i <- names(joined_sets2)[16:29]
joined_sets2_mutated <- joined_sets2 %>%
mutate(across(all_of(vars_i), ~ haven::zap_labels(.x))) %>% ## Heres a fun interaction with haven...
mutate(across(all_of(vars_i), ~ ifelse(.x > 2.5, "High", "Low")))
head(joined_sets2[,16:29])
#Compared with
head(joined_sets2_mutated[,16:29])
length(SurvData$interest + SurvData$PolDisc)
### Essentially, the following will remain true for 1:rows in dataframe
(SurvData$interest + SurvData$PolDisc)[8092] == SurvData$interest[8092] + SurvData$PolDisc[8092]
##
SurvData$pol_index <- (SurvData$PolDisc + SurvData$interest)/2 ## Making the mean out of the two
summary(SurvData$pol_index)
names(SurvData) ## Note which variables I do have
## First I only want country, gender and whostility
SurvData_sub <- SurvData %>%
select(country, gender, whostility)
names(SurvData_sub)
## Now lets select away PolDisc and interest
SurvData_sub <- SurvData %>%
select(-PolDisc, -interest)
names(SurvData_sub)
vars_i_want <- c("gender", "country", "whostility")
SurvData_sub <- SurvData %>%
select(all_of(vars_i_want))
names(SurvData_sub)
### On a pattern with starts_with
SurvData_sub <- SurvData %>%
select(starts_with("gender"))
names(SurvData_sub)
jap_surv <- SurvData %>%
filter(country == "Japan")
jap_surv_w <- SurvData %>%
filter(country == "Japan", gender_ifelsed == "Woman")
table(jap_surv_w$country, jap_surv_w$gender_ifelsed)
women_or_japanese <- SurvData %>%
filter(country == "Japan" | gender_ifelsed == "Woman")
table(women_or_japanese$country, women_or_japanese$gender_ifelsed)
grouped_f <- SurvData %>%
mutate(whostility = ifelse(whostility < 0, NA, whostility)) %>%  # You can add the unchanged vector as a responsein an ifelse, Values less than 0 are missing categories in WVS
group_by(country, year) %>%
summarise(respondents = n(),
whostility = mean(whostility, na.rm = TRUE))
head(grouped_f)
my_vars <- c("PolDisc", "interest", "whostility")
grouped_more <- SurvData %>%
mutate(across(all_of(my_vars), ~ ifelse(.x < 0, NA, .x))) %>%
group_by(country, year) %>%
summarise(across(all_of(my_vars), ~ mean(.x, na.rm = TRUE)))
head(grouped_more)
joined_lim <- joined_sets2 %>%
mutate(eu = ifelse(eu %in% c(1,2,3,4,5), eu, NA)) %>%
select(kjonn, parti, tid, eu)
joined_lim_agg <- joined_sets2 %>%
mutate(eu = ifelse(eu %in% c(1,2,3,4,5), eu, NA)) %>%
group_by(parti, tid) %>%
summarise(mean_eu = mean(eu, na.rm = TRUE))
joined_lim[c(3,4,64,65,556,557,1231,1232,5688, 5689,6783, 6784),] ## Indexing some random rows, so we can see variance
joined_lim_joined <- joined_lim %>%
left_join(joined_lim_agg, by = c("parti", "tid")) # Here i join in the new set, i know that the parti and tid variables are in both sets
joined_lim_joined[c(3,4,64,65,556,557,1231,1232,5688, 5689,6783, 6784),] ## Indexing the same numbers
## Will limit this dataset to only a single party, and a couple of questions and key variables
## Ignore the complex code, it might make sense later
vars_i <- names(joined_sets2)[16:29] ## I know columns 16:29 are the ones I want
mean_values_for_transf <- joined_sets2 %>%
select(parti, tid, all_of(vars_i)) %>%
group_by(parti, tid) %>%
summarise(across(all_of(vars_i), ~ mean(.x, na.rm = TRUE))) %>%
pivot_longer(cols = all_of(vars_i), names_to = "question", values_to = "mean_vals")
head(mean_values_for_transf)
joined_sets2_i <-joined_sets2
joined_sets2_i$id <- 1:nrow(joined_sets2) ## If you want a fun story, ask why this is here........
new_joined <- joined_sets2_i %>%
mutate(across(all_of(vars_i), ~ haven::zap_labels(.x)),
across(all_of(vars_i), ~ ifelse(!(.x %in% c(1,2,3,4,5)), NA, .x))) %>%  ## Likert scale, so outside 1-5 is missing vals
pivot_longer(cols = all_of(vars_i), names_to = "question", values_to = "q_response") %>%
left_join(mean_values_for_transf, by = c("parti", "tid", "question")) ## Note the join so that the mean vals for the questions is there as well
dim(new_joined) ## Gets the dimensions of the object
dist_means_joined <- new_joined %>%
mutate(dist_score = q_response - mean_vals) %>%
select(-q_response, -mean_vals) %>% ### Removing these because they are reduntant and would create strange frames
pivot_wider(names_from = "question", values_from = "dist_score")
head(joined_sets2[,vars_i])
head(dist_means_joined[,vars_i])
SurvData <- SurvData %>%
mutate(wave = case_when( ## Just using year will give a strange intercept
year == 1995 | year == 1996 ~ 1,
year == 2000 | year == 2001 ~ 2,
year == 2005 ~ 3,
year == 2010 ~ 4
))
model_1 <- lm(whostility ~ gender_text + country + wave + PolDisc + interest, data = SurvData)
summary(model_1)
model_2 <- lm(whostility ~ gender_text + country + wave + PolDisc + interest + country*gender_text, data = SurvData)
summary(model_2)
table(SurvData$voted)
SurvData_vot <- SurvData %>%
filter(!is.na(voted)) %>%  ## Filter out all obs that did not vote
mutate(vot_binary = ifelse(voted == 1, 1, 0))
names(SurvData_vot)
table(SurvData$gender_cased)
logit_m <- glm(vot_binary ~ gender_cased + country + wave + whostility + PolDisc + interest)
logit_m <- glm(vot_binary ~ gender_cased + country + wave + whostility + PolDisc + interest, data = SurvData_vot, family = "binomial")
?glm
logit_m <- glm(vot_binary ~ gender_cased + country + wave + whostility + PolDisc + interest, family = "binomial", data = SurvData_vot)
table(SurvData_vot$country)
table(SurvData_vot$wave)
table(SurvData_vot$whostility)
table(SurvData_vot$PolDisc)
table(SurvData_vot$interest)
logit_m <- glm(vot_binary ~ gender_cased + country + wave + whostility + interest, family = "binomial", data = SurvData_vot)
summary(logit_m)
install.packages("huxtable")
huxtable::huxreg(logit_m) ## This is where I would normally use stargazer, but
